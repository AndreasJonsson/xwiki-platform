## ---------------------------------------------------------------------------------------------------------
## This template is called by the create action which binds some context variables as it executes, based on
## the request and the current document. These variables can be used in this template:
## * $spaceReference - the space reference of the new document, read from the "spaceReference" paremeter
## * $name - the name to use for the new document, read from the "name" parameter
## * $isSpace - true if we are creating a non-terminal document ($name is the space name), false if we are
##              creating a terminal document ($name is the document name). Determined by the create action
## * $availableTemplatesProviders - list of template provider documents available from the current space
##
## Note: Make sure to use these bindings instead of directly using the request parameters, as the bindings
## also consider backwards compatibility and convert older "space" and "page" parameters if they are passed.
## ---------------------------------------------------------------------------------------------------------

## ---------------------------------------------------------------------------------------------------------
## This template can be passed a parent document reference in parameter (using the "parent" parameter).
## If a parent parameter is passed, use it to set the parent when creating the new page.
## If no parent parameter was passed, the create action will determine it to be the current document if it
## exists or the Main space's webhome if the current document does not exist.
## ---------------------------------------------------------------------------------------------------------
#set ($parent = "$!request.getParameter('parent')")

## ---------------------------------------------------------------------------------------------------------
## Get the passed template provider, if any
## ---------------------------------------------------------------------------------------------------------
#set($templateProvider = "$!request.templateprovider")
## Get the template as well, since in case template provider is missing, template should be used, 
## to allow creation from template directly, without necessarily going through template provider.
#set($template = "$!request.template")

## ---------------------------------------------------------------------------------------------------------
## If there was an exception creating the page because of invalid space, notify. 
## Should set the other variables only if there is no exception. Otherwise, if there's an exception other than the 
## 11016 one, nothing will be displayed, depending on the other passed parameters.
## ---------------------------------------------------------------------------------------------------------
#set($exception = $createException)
## check if the exception is about the non-allowed spaces for template
#if("$!exception" != '' && $exception.code == 11016)
  <div class="box errormessage">
    #set($allowedSpaces = $createAllowedSpaces)
    #if ($allowedSpaces.size() == 1)
      $services.localization.render('core.create.template.allowedspace.inline', [$templateProvider, $allowedSpaces.get(0)])
    #else
      $services.localization.render('core.create.template.allowedspaces.inline', [$templateProvider, $allowedSpaces.toString()])
    #end
  </div>
  ## Show the spaceReference input for the user to change the value
  #set ($showSpaceReferenceInput = true)
#end
## check if the exception is about the document which already exists
#if("$!exception" != '' && $exception.code == 11002)
  <div class='box errormessage'>
      ## Use the 'existingDocumentReference' context binding set by the create action for this case.
      $services.localization.render('core.create.page.error.docalreadyexists',
        ["${existingDocumentReference}",
         $xwiki.getURL($existingDocumentReference, 'view', ''),
         $xwiki.getURL($existingDocumentReference, 'edit', '')
        ]
      )
  </div>
  ## Show the spaceReference input for the user to change the value
  #set ($showSpaceReferenceInput = true)
  ## Show the name input for the user to change the value
  #set ($showNameInput = true)
#end
## ---------------------------------------------------------------------------------------------------------
## Output JavaScript validation code
## ---------------------------------------------------------------------------------------------------------
$xwiki.get('jsfx').use('uicomponents/widgets/validation/livevalidation_prototype.js')##
$xwiki.get('ssfx').use('uicomponents/widgets/validation/livevalidation.css', true)##
<script type='text/javascript'>
//<![CDATA[
  XWiki.createPage = {
    spaceValidator : {},
    pageValidator : {},
    currentSpaceInclusionParameters : {},
    /**
     * Create Name Field Validator.
     */
    initPageValidator : function() {
      var pageInput = $('name');
      this.pageValidator = new LiveValidation(pageInput, { validMessage: "$services.localization.render('core.validation.valid.message')" });
      // We use a custom validation in order to handle the default value on browsers that don't support the placeholder attribute.
      this.pageValidator.displayMessageWhenEmpty = true;
      this.pageValidator.add(Validate.Custom, {
        failureMessage: "$services.localization.render('core.validation.required.message')",
        against: function(value) {
          return !pageInput.hasClassName('empty') && typeof value == 'string' && value.strip().length > 0;
        }
      });
    },
    /**
     * Create Space Reference Field Validator.
     */
    initSpaceValidator : function() {
      var spaceReferenceInput = $('spaceReference');
      var terminalCheckbox = $('terminal');
      this.spaceValidator = new LiveValidation($('spaceReference'), { validMessage: "$services.localization.render('core.validation.valid.message')" });
      this.spaceValidator.displayMessageWhenEmpty = true;
      this.spaceValidator.add(Validate.Custom, {
        failureMessage: "$services.localization.render('core.validation.required.message')",
        against: function(value) {
          if (terminalCheckbox.checked) {
            // Space reference is required for terminal documents
            return typeof value == 'string' && value.strip().length > 0;
          } else {
            // Space reference can be empty for non-terminal documents
            return true;
          }
        }
      });

      // Trigger validation when the terminal status changes.
      terminalCheckbox.observe('change', function() {
        this.spaceValidator.validate();
      }.bind(this));
    },
    /**
     * Update Space Field Validator, allows to specify a list of allowed spaces for the field.
     */
    updateSpaceValidator : function(values, failureMessage) {
      if(values.length > 0) {
        this.currentSpaceInclusionParameters = {
          within: values,
          failureMessage: failureMessage
        };
        this.spaceValidator.add(Validate.Inclusion, this.currentSpaceInclusionParameters);
      } else {
        this.spaceValidator.remove(Validate.Inclusion, this.currentSpaceInclusionParameters);
      }
      this.spaceValidator.validate();
    }
  };
//]]>
</script>

## ---------------------------------------------------------------------------------------------------------
## Note: The list of available template providers is computed in the action and set on the context under
## the "availableTemplatesProviders" binding.
## ---------------------------------------------------------------------------------------------------------

## ---------------------------------------------------------------------------------------------------------
## Macro for displaying the available templates and changing target space rules accordingly
## ---------------------------------------------------------------------------------------------------------
#macro (displayTemplateChoice)
    ## ---------------------------------------------------------------------------------------------------------
    ## Template field
    ## ---------------------------------------------------------------------------------------------------------
    #if(!$availableTemplateProviders.isEmpty() && $templateProvider == '' && $template == '')
      #set ($jsSpaceInclusionValidationContainer = [])
      <dl>
        <dt>
          <label>$services.localization.render('core.create.template')</label>
          <span class='xHint'>$services.localization.render('core.create.page.template.hint')</span>
        </dt>
        <dd>
          <label for='xwiki-create-form-0' class='xwiki-form-listclass'>
            <input id='xwiki-create-form-0' type='radio' name='templateprovider' value='' checked='checked'/>
            $services.localization.render('core.create.page.template.empty')
          </label>
          #set($discard = $jsSpaceInclusionValidationContainer.add(['xwiki-create-form-0', [], '']))
          #foreach($tpdoc in $availableTemplateProviders)
            #set ($tpobj = $tpdoc.getObject('XWiki.TemplateProviderClass'))
            ##
            ## Display the template provider field option in the form.
            ##
            #set($inputId = "xwiki-create-form-${velocityCount}")
            <label for="$inputId" class='xwiki-form-listclass'>
              ## pass the template provider to the create action. Prepare the template provider reference
              #set($tpdocRef = $services.model.serialize($tpdoc.documentReference, 'local'))
              <input id="$inputId" type='radio' name='templateprovider' value="$escapetool.xml(${tpdocRef})"/>
              ## use the template name as a translation key, to allow i18n
              $escapetool.xml($services.localization.render($tpobj.getProperty('name').value))
            </label>
            ##
            ## Extract and save the list of allowed spaces to be used in the JavaScript validation of the spaceReference input.
            ##
            #set($jsAllowedSpacesArray = '')## Reset previous value
            #set($allowedSpaces = $tpobj.getProperty('spaces').getValue())
            #if(!$allowedSpaces.isEmpty())
              #set($jsAllowedSpacesArray = "'$stringtool.join($allowedSpaces, ''', ''')'")
            #end
            #if($allowedSpaces.isEmpty())
              #set($message = '')
            #elseif($allowedSpaces.size() == 1)
              #set($message = $services.localization.render('core.create.template.allowedspace.inline', [$tpobj.getProperty('name').getValue(), $jsAllowedSpacesArray]))
            #else
              #set($message = $services.localization.render('core.create.template.allowedspaces.inline', [$tpobj.getProperty('name').getValue(), $jsAllowedSpacesArray]))
            #end
            #set($discard = $jsSpaceInclusionValidationContainer.add([$inputId, "[${jsAllowedSpacesArray}]", $message]))
          #end
        </dd>
      </dl>
      ## ---------------------------------------------------------------------------------------------------------
      ## Output JavaScript code that will update validation rules for the spaceReference field (depends on template)
      ## ---------------------------------------------------------------------------------------------------------
      <script type='text/javascript'>
      //<![CDATA[
      Event.observe(document, 'xwiki:dom:loaded', function() {
        #foreach($validator in $jsSpaceInclusionValidationContainer)
          $("$validator.get(0)").observe('click', function() {
            XWiki.createPage.updateSpaceValidator($validator.get(1), "$validator.get(2)");
          }.bindAsEventListener(XWiki.createPage));
        #end
      });
      //]]>
      </script>
    #else
      #if ($templateProvider != '')
        ## if a template provider is set (e.g. when this page is displayed as a result of an error), put it in the form
        <input type='hidden' id='templateprovider' name='templateprovider' value="$!{escapetool.xml($templateProvider)}" />
      #elseif ($template != '')
        ## if a template is set (to allow to get the create form from a template directly, without having to choose 
        ## the template provider), use that template
        <input type='hidden' id='template' name='template' value="$!{escapetool.xml($template)}" />
      #else
        ## finally, if none of these are set, put an empty template provider
        <input type='hidden' id='templateprovider' name='templateprovider' value='' />
      #end
    #end
#end
## ---------------------------------------------------------------------------------------------------------
## Display the form.
## ---------------------------------------------------------------------------------------------------------
<form action="$doc.getURL('create')" method='post' class='xform third'>
  <dl>

  ## ---------------------------------------------------------------------------------------------------------
  ## Page creation
  ## ---------------------------------------------------------------------------------------------------------
  #set ($jsValidationInitializersContainer = [])
  <input type='hidden' name='parent' value="$!{escapetool.xml($parent)}"/>
  ## ---------------------------------------------------------------------------------------------------------
  ## Template field
  ## ---------------------------------------------------------------------------------------------------------
  #displayTemplateChoice()
  ## ---------------------------------------------------------------------------------------------------------
  ## Space Reference field
  ## ---------------------------------------------------------------------------------------------------------
  ## Determine if we need to show the space reference input.
  #if (!$showSpaceReferenceInput)
    ## We are on an existing document and no space reference was specified for the new document to create.
    #set ($showSpaceReferenceInput = (!$doc.isNew() && "$!spaceReference" == ''))
    #if ($showSpaceReferenceInput)
      ## In the deprecated space creation process however, we only needed the space name.
      #set ($deprecatedSpaceCreate = ("$!request.tocreate" == 'space'))
      #set ($showSpaceReferenceInput = !$deprecatedSpaceCreate)
    #end
  #end
  ##
  #if ($showSpaceReferenceInput)
    #if ("$!spaceReference" == '')
      #set ($defaultSpaceReference = $doc.documentReference.lastSpaceReference)
    #else
      #set ($defaultSpaceReference = $spaceReference)
    #end
    ## Make sure to use the local serialized string reference
    #set ($defaultSpaceReferenceString = $services.model.serialize($defaultSpaceReference, 'local'))
    <dt>
      <label for='spaceReference'>$services.localization.render('core.create.spaceReference.label')</label>
      <span class='xHint'>$services.localization.render('core.create.spaceReference.hint')</span>
    </dt>
    <dd>
      <input type='text' id='spaceReference' size='60' name='spaceReference' class='suggestSpaces' value="$!{escapetool.xml($defaultSpaceReferenceString)}"/>
    </dd>
    #set($discard = $jsValidationInitializersContainer.add('XWiki.createPage.initSpaceValidator();'))
  #else
    #set ($spaceReferenceLocalString = $services.model.serialize($spaceReference, 'local'))
    <input type='hidden' id='spaceReference' name='spaceReference' value="$!{escapetool.xml($spaceReferenceLocalString)}" />
  #end
  ## ---------------------------------------------------------------------------------------------------------
  ## Name field
  ## ---------------------------------------------------------------------------------------------------------
  #if("$!name" == '' || $showNameInput)
    #if ("$!name" == '')
      #set ($defaultName = $services.localization.render('core.create.pageText'))
      #set ($isPlaceholder = true)
    #else
      #set ($defaultName = $name)
    #end
    <dt>
      <label for='name'>$services.localization.render('core.create.page')</label>
      <span class='xHint'>$services.localization.render('core.create.page.hint')</span>
    </dt>
    <dd>
      <input type='text' id='name' size='60' name='name' value="$defaultName" #if ($isPlaceholder)class='withTip'#end/>
    </dd>
    #set($discard = $jsValidationInitializersContainer.add('XWiki.createPage.initPageValidator();'))
  #else
    <input type='hidden' id='name' name='name' value="$!{escapetool.xml($name)}" />
  #end
  ## -------
  ## Page type - Advanced users
  ## -------
  #if ($xwiki.getUserPreference('usertype') == 'Advanced')
    <dt>
      <label for='tocreate'>$services.localization.render('core.create.terminal.label')</label>
      <span class='xHint'>$services.localization.render('core.create.terminal.hint')</span>
    </dt>
    <dd>
      <label for='terminal'>
        <input type='checkbox' id='terminal' name='tocreate' value='terminal' #if(!$isSpace)checked='checked'#end />
        $services.localization.render('core.create.terminal.status')
      </label>
    </dd>
  #end
  ## ---------------------------------------------------------------------------------------------------------
  ## Output JavaScript validation code
  ## ---------------------------------------------------------------------------------------------------------
  <script type='text/javascript'>
  //<![CDATA[
    Event.observe(document, 'xwiki:dom:loaded', function() {
      #foreach($initializer in $jsValidationInitializersContainer)
        $initializer
      #end
    }.bindAsEventListener(XWiki.createPage));
  //]]>
  </script>

  </dl>

  <div class='buttons'>
    <span class='buttonwrapper'>
      <input type='submit' class='button' value="$services.localization.render('create')"/>
    </span>
  </div>
</form>
