#template('hierarchy_macros.vm')

#set ($defaultDocumentName = $services.model.getEntityReference('DOCUMENT', 'default').name)

#macro (displaySourceDocument $options)
  <dt>
    <label>$services.localization.render($options.label)</label>
    <span class="xHint">$services.localization.render($options.hint)</span>
  </dt>
  <dd>
    #hierarchy()
    <input type="hidden" name="sourceWikiName" value="$!escapetool.xml($doc.wiki)" />
    <input type="hidden" name="sourceSpaceName" value="$!escapetool.xml($doc.space)" />
    <input type="hidden" name="sourcePageName" value="$!escapetool.xml($doc.name)" />
  </dd>
#end

#macro (displayTranslationSelector $options)
  #set ($docTranslations = $doc.getTranslationList())
  #if ($xwiki.isMultiLingual() && $docTranslations.size() > 0)
    <dt>
      <label for="language">$services.localization.render('language')</label>
      <span class="xHint">$services.localization.render($options.hint)</span>
    </dt>
    <dd>
      <select id="language" name="language">
        ## Add a special "All Translations" combo box entry to copy all translations.
        <option value="ALL" selected="selected">
          $services.localization.render('core.copy.allTranslations')
        </option>
        ## Add all the existing translations.
        #set ($currentLocale = $services.localization.currentLocale)
        #foreach ($docTranslation in $docTranslations)
          #set ($locale = $services.localization.toLocale($docTranslation))
          <option value="$escapetool.xml($docTranslation)">
            $escapetool.xml($locale.getDisplayName($currentLocale))
          </option>
        #end
      </select>
    </dd>
  #end
#end

#macro (displayChildrenCheckbox $options)
  ## Check if the document can have children.
  #if ($doc.name == $defaultDocumentName)
    #countDocumentChildren($doc.documentReference $childCount)
    #set ($childrenURL = $escapetool.xml($doc.getURL('view', 'viewer=children&displayHidden=true')))
    <dt>
      <label>
        <input type="checkbox" name="deep" value="true" />
        $services.localization.render($options.label, ["<a href='$childrenURL'>", $childCount, '</a>'])
      </label>
      <span class="xHint">$services.localization.render($options.hint)</span>
    </dt>
  #end
#end

#macro (displayLinksCheckbox $options)
  #set ($backLinksCount = $doc.backlinks.size())
  #set ($backLinksURL = $escapetool.xml($doc.getURL('view', 'viewer=backlinks')))
  <dt>
    <label>
      <input type="checkbox" name="updateLinks" value="true" />
      $services.localization.render($options.label, ["<a href='$backLinksURL'>", $backLinksCount, '</a>'])
    </label>
    <span class="xHint">$services.localization.render($options.hint)</span>
  </dt>
#end

#macro (displayTerminalCheckbox $options)
  <dt>
    <label>
      #set ($sourcePageIsTerminal = $doc.name != $defaultDocumentName)
      <input type="checkbox" name="terminal" value="true" #if ($sourcePageIsTerminal)checked="checked"#end/>
      $services.localization.render($options.label)
    </label>
    <span class="xHint">$services.localization.render($options.hint)</span>
  </dt>
#end

#macro (maybeDisplayTerminalCheckbox $options)
  #if ($isAdvancedUser || $isSuperAdmin)
    <dl>
      #displayTerminalCheckbox($options)
    </dl>
  #end
#end

#macro (countDocumentChildren $documentReference $return)
  ## We cannot perform a single query because:
  ## * select count(distinct case ...) doesn't work (https://hibernate.atlassian.net/browse/HHH-4150)
  ## * select count(*) from (select distinct case ...) doesn't work (https://hibernate.atlassian.net/browse/HHH-3356)
  ## * if we use group-by then count returns the number of rows in each group not the number of groups
  ## So we're forced to do two queries.
  ## NOTE: We include hidden children.
  ## Count child spaces.
  #set ($statement = 'select count(*) from XWikiSpace space where space.parent = :parentSpaceRef')
  #set ($query = $services.query.hql($statement).setWiki($documentReference.wikiReference.name))
  #set ($parentLocalSpaceRef = $services.model.serialize($documentReference.parent, 'local'))
  #set ($count = $query.bindValue('parentSpaceRef', $parentLocalSpaceRef).execute().get(0))
  ## Count child documents.
  #set ($isChildDocument = [
    'doc.space = :parentSpaceRef',
    'doc.translation = 0',
    'doc.name <> :spaceHomePageName'
  ])
  #set ($parameters = {
    'parentSpaceRef': $parentLocalSpaceRef,
    'spaceHomePageName': $services.model.getEntityReference('DOCUMENT', 'default').name
  })
  #set ($query = $services.query.hql("where $stringtool.join($isChildDocument, ' and ')"))
  #set ($query = $query.setWiki($parentReference.extractReference('WIKI').name))
  #foreach ($entry in $parameters.entrySet())
    #set ($query = $query.bindValue($entry.key, $entry.value))
  #end
  #set ($count = $count + $query.count())
  #set ($return = $NULL)
  #setVariable("$return" $count)
#end

#macro (getNestedDocumentReference $wiki $localSpaceReference $name $locale $terminal $return)
  #if ("$!wiki" == '')
    #set ($wiki = $xcontext.database)
  #end
  #set ($wikiReference = $services.model.createWikiReference($wiki))
  #if ($terminal)
    #set ($spaceReference = $services.model.resolveSpace($localSpaceReference, 'explicit', $wikiReference))
    #set ($documentReference = $services.model.createEntityReference($name, 'DOCUMENT', $spaceReference))
  #else
    #set ($parentReference = $wikiReference)
    #if ($localSpaceReference != "")
      #set ($parentReference = $services.model.resolveSpace($localSpaceReference, 'explicit', $wikiReference))
    #end
    #set ($spaceReference = $services.model.createEntityReference($name, 'SPACE', $parentReference))
    #set ($documentReference = $services.model.resolveDocument('', 'default', $spaceReference))
  #end
  #set ($documentReference = $services.model.createDocumentReference($documentReference, $locale))
  #set ($return = $NULL)
  #setVariable("$return" $documentReference)
#end

#macro (isTargetDocumentTerminal $sourceDocumentName)
  #if ("$!request.terminal" != '' || $request.terminal == '')
    ## The terminal parameter is specified.
    #set ($terminal = $request.terminal == 'true')
  #else
    ## Preserve the source document type.
    #set ($terminal = $sourceDocumentName != $defaultDocumentName)
  #end
#end
